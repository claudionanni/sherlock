#!/usr/bin/python3

#SHERLOCK © 2020 - MariaDB Support Team - Claudio Nanni

# Module Imports
import mariadb
import sys
import os
import time
import json
import requests
from datetime import datetime
from string import digits
import argparse
import gzip
import zipfile
from lxml import html
import requests
import urllib.request
import time
from bs4 import BeautifulSoup

def retrieve_file_paths(dirName):
 
  # setup file paths variable
  filePaths = []
  # Read all directory, subdirectories and file lists
  for root, directories, files in os.walk(dirName):
    for filename in files:
        # Create the full filepath by using os module.
        filePath = os.path.join(root, filename)
        filePaths.append(filePath)
  # return all paths
  return filePaths

def get_token_and_session():
    s = requests.Session()
    url= 'https://filerequestpro.com/up/mariadb-support'
    getResponse = s.get(url)
    print(s)
    print(s.cookies.get_dict())
    #print(getResponse.text)
    print("END OF GET")
    soup = BeautifulSoup(getResponse.text, "html.parser")
    u_token = soup.find('input', {'name': '_token'}).get('value')
    u_session = soup.find('input', {'name': 'upload_session'}).get('value')
    return([u_token,u_session,s])

def download_commands_from_url():
    try:
       url = 'https://raw.githubusercontent.com/claudionanni/sherlock/master/sherlock_cmd.json'
       r = requests.get(url, allow_redirects=True)
       open('./sherlock_cmd.json', 'wb').write(r.content)
    except:
       print("Commands file could not be downloaded from the internet, will try to use the local copy.")

def load_commands_from_file():
    try:
        with open('./sherlock_cmd.json') as f:
            Commands = json.load(f)
            return Commands
    except:
        print("Could not load local commands file, we can't proceed.")
        exit()


## Add management for 'la' a=all linux commands
def exec_commands(cmdNum,lstCmds):
   print("\n")
   if(cmdNum=='la'):
      lDict = {k: v for k, v in lstCmds.items() if k.startswith('l')}
      for k in lDict:
         (TYPE,USER_TYPE,COMMAND,DESCRIPTION)=lstCmds[k]
         output_file=str(k)+".shock"
         if(args.screen):
             toDisk=''
         else:
             toDisk=" > " + output_file
         full_command=COMMAND + toDisk
         print("_"*120)
         print("\n",str(k),":: ",full_command,"\t\t\t (",DESCRIPTION,")")
         if(USER_TYPE!='h'):
             print("_"*120)
             os.system(full_command)
             print("_"*120)
             if(0==1):
                 os.system('cat ' + output_file)
                 print("¨"*120)
         else:
             print("\nNOTE: Command needs manual execution!")
   else:    
      (TYPE,USER_TYPE,COMMAND,DESCRIPTION)=lstCmds[cmdNum]
      output_file=str(cmdNum)+".shock"
      if(args.screen):
          toDisk=''
      else:
          toDisk=" > " + output_file
      full_command=COMMAND + toDisk
      print("_"*120)
      print("\n",cmdNum,":: ",full_command,"\t\t\t (",DESCRIPTION,")")
      if(USER_TYPE!='h'):
         print("_"*120)
         os.system(full_command)
         print("_"*120)
         if(0==1):
             os.system('cat ' + output_file)
             print("¨"*120)
      else:
          print("\nNOTE: ",str(cmdNum), ":: command needs manual execution!")


## Add management for 'ma' a=all mdb commands
def exec_mariadb(cmdNum,lstCmds,user='-',pwd='-',host='-',port='-'):
   if(cmdNum=='ma'):
       mDict = {k: v for k, v in lstCmds.items() if k.startswith('m')}
       for k in mDict:    
            (TYPE,USER_TYPE,COMMAND,DESCRIPTION)=lstCmds[k]
            output_file=str(k)+".shock"
            full_command="mysql -u"+user+" -p"+pwd+" -h"+host+" -P"+port+" -e \""+COMMAND+"\""
            if(args.screen):
                toDisk=''
            else:
                toDisk=" > " + output_file
            full_command=full_command + toDisk
            print("_"*120)
            print(full_command)
            if(USER_TYPE!='h'):
                print("_"*120)
                os.system(full_command)
                print("_"*120)
                if(0==1):
                    os.system('cat ' + output_file)
                    print("¨"*120)
            else:
                print("\nNOTE:",str(k),":: command needs manual execution")
   else:
       (TYPE,USER_TYPE,COMMAND,DESCRIPTION)=lstCmds[cmdNum]
       output_file=str(cmdNum)+".shock"
       full_command="mysql -u"+user+" -p"+pwd+" -h"+host+" -P"+port+" -e \""+COMMAND+"\""
       if(args.screen):
           toDisk=''
       else:
           toDisk=" > " + output_file
       full_command=full_command + toDisk
       print("_"*120)
       print(full_command)
       if(USER_TYPE!='h'):
            print("_"*120)
            os.system(full_command)
            print("_"*120)
            if(0==1):
                os.system('cat ' + output_file)
                print("¨"*120)
       else:
            print("Command needs manual execution")


def list_commands():
   print("\nList of available commands:\n")
   print("cmdid","\t: (type/user)\t[          command          ]\t\t--> description")
   print("_"*120)
   ### HERE There is some censorship on the prefix of possible commands, decide what to do
   mDict = {k: v for k, v in listCommands.items() if k.startswith('m') or k.startswith('l')}
   for k in mDict:
       (TYPE,USER_TYPE,COMMAND,DESCRIPTION)=listCommands[k]
       print(k,"\t: (",TYPE,"/",USER_TYPE,")\t[",COMMAND[:25].ljust(25),"]\t\t--> ",DESCRIPTION)
   print("¨"*120)
   for li in prefixCommands:
       print(li+"a: runs all commands that start with '",li,"'")
   print("/ u = executed by non administrative user")
   print("/ s = needs execution by administrative user")
   print("/ h = needs manual edit and execution")
   print("¨"*120)


###
###  MAIN SECTION - Executed at startup
###

print("\n\nSHERLOCK ©2020 By MariaDB Support Team - Claudio The Nanni")

parser = argparse.ArgumentParser(prog='shock',description='Collects info from the OS and a MariaDB instance for incident investigation.')
parser.add_argument("-l","--list", action="store_true",help="Provides the list of available commands from the remote or local json file")
parser.add_argument("-H","--host", metavar='<hostname or ip>',default='127.0.0.1',help='Hostname or ip of the MariaDB instance')
parser.add_argument("-P","--port", metavar='<port>',default='3306',help='Port the MariaDB instance')
parser.add_argument("-u","--user", metavar='<user>',default='root',help='User of the MariaDB instance')
parser.add_argument("-p","--password", metavar='<password>',default='',help='Password of the MariaDB instance')
parser.add_argument("-c","--commands", metavar='<command>,',nargs='*',help='It takes a comma separated list of commands')
#parser.add_argument("-v","--verbose",action="store_true",help='Also prints the commands output on screen')
parser.add_argument("-s","--screen",action="store_true",help='Show ouput of commands on screen, do not write to files')
parser.add_argument("-i","--issue",metavar="<issue number>",default='99999',help='Tag file with issue number')
args = parser.parse_args()

timestampedFolder=''
def createTimestampedFolder():
    timestampedFolder=datetime.now().strftime("%Y%m%d-%H%M%S")
    if(args.issue):
        issue_number="i"+args.issue+"-"
    else:
        issue_numer=''

    path=issue_number + "shock-" + timestampedFolder
    print("\nAll collected data will be placed in the folder: ",path," and zipped to ",path+".zip\n")
    try:
        os.mkdir(path)
    except OSError:
        print ("Creation of the directory %s failed" % path)
    else:
        #print ("Successfully created the directory %s " % path)
        return(path)


download_commands_from_url()
listCommands={}
listCommands=load_commands_from_file()
prefixCommands=set([item[:1] for item in listCommands])
#print(prefixCommands)

if len(sys.argv)==1:
    parser.print_help()

if(args.list):
    list_commands()

if(args.commands):
    if(not args.screen):
        timestampedFolder=createTimestampedFolder()
        zippedFolder=timestampedFolder + '.zip'
        os.chdir(timestampedFolder)
    cmdList=args.commands[0].split(',')
    for i in cmdList:
        iSin=i[:1]
        if(iSin=='l'):
           exec_commands(i,listCommands)
        if(iSin=='m'):
           exec_mariadb(i,listCommands,args.user,args.password,args.host,args.port)
    if(not args.screen):
        dir_name = '../' + timestampedFolder
        filePaths = retrieve_file_paths(dir_name)
        #for fileName in filePaths:
            #    print(fileName)
        zip_file = zipfile.ZipFile('../' + zippedFolder, 'w')
        with zip_file:
            for file in filePaths:
                zip_file.write(file)
    if(1==0):
        f__token, f_upload_session,mySession=get_token_and_session()
        f_user_id=621
        f_page_id=614
        f_filename=zippedFolder
        f_uuid=112299
        f_totalchunks=1
        f_action='https://filerequestpro.com/process-uploads'
#<form id="frp" enctype="multipart/form-data" action="https://filerequestpro.com/upload">        
        ### Two cookies needs to be set
        headers = {'User-Agent': 'Mozilla/5.0'}
        data = {'_token':f__token,'upload_session':f_upload_session,'user_id':f_user_id,'page_id':f_page_id,'filename':f_filename,'uuid':f_uuid,'totalchunks':f_totalchunks}
        ## Will tell now 'Session Expired'o
        #print("POST STARTS HERE")
        #print(mySession.cookies.get_dict())
        #postResponse=mySession.post(url = f_action, headers=headers,files = data)
        #print(postResponse.status_code)
        #soup = BeautifulSoup(postResponse.text, "html.parser")
        #print(soup)
        

print("\nExiting...\n")
